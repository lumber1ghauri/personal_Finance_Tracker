<head>
  <style>
    #incomeExpenseChart, #categoryChart {
      width: 100%;
      height: 400px;
    }
  </style>
</head>

<div class="row">
  <!-- Total Income Card -->
  <div class="col-md-4">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Total Income</h5>
        <p class="card-text"><%= number_to_currency(@total_income) %></p>
      </div>
    </div>
  </div>

  <!-- Total Expense Card -->
  <div class="col-md-4">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Total Expense</h5>
        <p class="card-text"><%= number_to_currency(@total_expense) %></p>
      </div>
    </div>
  </div>

  <!-- Balance Card -->
  <div class="col-md-4">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Balance</h5>
        <p class="card-text"><%= number_to_currency(@balance) %></p>
      </div>
    </div>
  </div>
</div>

<!-- Charts -->
<div class="row mt-4">
  <!-- Income vs Expense Line Chart -->
  <div class="col-md-6">
    <h5>Income vs Expense</h5>
    <canvas id="incomeExpenseChart"></canvas>
  </div>

  <!-- Expense by Category Donut Chart -->
  <div class="col-md-6">
    <h5>Expenses by Category</h5>
    <canvas id="categoryChart"></canvas>
  </div>
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.8.0/dist/chart.min.js"></script>

<script>
  // Prepare dates
  const allDates = <%= (@income_data.keys + @expense_data.keys).uniq.sort.map { |date| date.strftime("%b %d") }.to_json.html_safe %>;

  // Income and expense maps
  const incomeMap = <%= @income_data.transform_keys { |d| d.strftime("%b %d") }.to_json.html_safe %>;
  const expenseMap = <%= @expense_data.transform_keys { |d| d.strftime("%b %d") }.to_json.html_safe %>;

  // Fill data arrays based on dates
  const incomeData = allDates.map(date => incomeMap[date] || 0);
  const expenseData = allDates.map(date => expenseMap[date] || 0);

  // Render Income vs Expense Line Chart
  const ctx1 = document.getElementById('incomeExpenseChart').getContext('2d');
  new Chart(ctx1, {
    type: 'line',
    data: {
      labels: allDates,
      datasets: [
        {
          label: 'Income',
          data: incomeData,
          borderColor: '#0d6efd',
          backgroundColor: 'rgba(13,110,253,0.1)',
          tension: 0.4,
          fill: true
        },
        {
          label: 'Expense',
          data: expenseData,
          borderColor: '#dc3545',
          backgroundColor: 'rgba(220,53,69,0.1)',
          tension: 0.4,
          fill: true
        }
      ]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { position: 'top' },
        tooltip: {
          callbacks: {
            label: function(tooltipItem) {
              return `$${tooltipItem.raw.toFixed(2)}`;
            }
          }
        }
      }
    }
  });

  // Category chart data
const categoryLabels = <%= @category_expenses.keys.to_json.html_safe %>;
const categoryData = <%= @category_expenses.values.to_json.html_safe %>;


  // Render Expense by Category Donut Chart
  const ctx2 = document.getElementById('categoryChart').getContext('2d');
  new Chart(ctx2, {
    type: 'doughnut',
    data: {
      labels: categoryLabels,
      datasets: [{
        data: categoryData,
        backgroundColor: ['#0dcaf0', '#ffc107', '#dc3545', '#20c997', '#6f42c1']
      }]
    },
    options: {
      responsive: true,
      plugins: {
        tooltip: {
          callbacks: {
            label: function(tooltipItem) {
              return `${categoryLabels[tooltipItem.dataIndex]}: $${tooltipItem.raw.toFixed(2)}`;
            }
          }
        },
        legend: { position: 'top' }
      }
    }
  });
</script>
